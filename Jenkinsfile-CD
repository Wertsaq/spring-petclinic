pipeline {
    agent any

    options {
        skipDefaultCheckout()
    }

    environment {
        IMAGE_NAME = 'wertsaq/petclinic'
    }

    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'qa'], description: 'Select the deployment environment')
        choice(name: 'IMAGE_TAG', choices: ['3.3.0', 'latest'], description: 'Docker image tag to deploy')
    }

    stages {
        stage('Deploy') {
            agent { label 'jenkins-slave-docker-petclinic' }
            steps {
                script {
                    echo "Deploying application to ${params.ENVIRONMENT} environment with tag ${params.IMAGE_TAG}..."

                    def serverCredentials = getServerCredentials(params.ENVIRONMENT)

                    withCredentials([
                        usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS'),
                        string(credentialsId: serverCredentials.serverId, variable: 'SERVER_ADDRESS'),
                        string(credentialsId: serverCredentials.portId, variable: 'PORT')
                    ]) {
                        sh 'echo $DOCKERHUB_PASS | docker login -u $DOCKERHUB_USER --password-stdin'
                        sh 'docker stop petclinic || true'
                        sh 'docker rm petclinic || true'
                        sh "docker pull ${IMAGE_NAME}:${params.IMAGE_TAG}"
                        sh "docker run -d --name petclinic -p ${PORT}:8080 ${IMAGE_NAME}:${params.IMAGE_TAG}"
                    }
                }
            }
        }

        stage('Health Check') {
            steps {
                script {
                    echo 'Waiting for the application to start...'

                    def serverCredentials = getServerCredentials(params.ENVIRONMENT) 

                    def maxRetries = 10
                    def retryInterval = 30  
                    def healthCheckUrl

                    withCredentials([
                        string(credentialsId: serverCredentials.serverId, variable: 'SERVER_ADDRESS'),
                        string(credentialsId: serverCredentials.portId, variable: 'PORT')
                    ]) {
                        healthCheckUrl = "http://${SERVER_ADDRESS}:${PORT}/actuator/health"
                    }

                    echo "Performing health check on ${healthCheckUrl}..."

                    def healthCheckPassed = false

                    for (int i = 0; i < maxRetries; i++) {
                        def statusCode = sh(
                            script: "curl -o /dev/null -s -w \"%{http_code}\" ${healthCheckUrl}",
                            returnStdout: true
                        ).trim()

                        if (statusCode == '200') {
                            echo "Health check passed with status code 200!"
                            healthCheckPassed = true
                            break
                        } else {
                            echo "Health check attempt ${i+1}/${maxRetries} failed with status code ${statusCode}. Retrying in ${retryInterval} seconds..."
                            sleep(time: retryInterval, unit: 'SECONDS')
                        }
                    }

                    if (!healthCheckPassed) {
                        echo "Health check failed after ${maxRetries} attempts."
                        error("Health check failed")
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspaces...'
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}

def getServerCredentials(environment) {
    switch (environment) {
        case 'dev':
            return [serverId: 'dev-server-address', portId: 'dev-port']
        case 'qa':
            return [serverId: 'qa-server-address', portId: 'qa-port']
        default:
            error("Unknown environment: ${environment}")
    }
}
